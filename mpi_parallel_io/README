
Γαρμπής Παναγιώτης-Ορέστης                      1115201400025
Γκαραγκάνης Ευάγγελος                           1115201400033
Κοτρώνης Κωνσταντίνος                           1115201400074


-Όπως και στο πρόγραμμα της απλής MPI, έτσι και εδώ περιέχονται τα ίδια βασικά αρχεία, δηλαδή το σειριακό για εξακρίβωση
 αποτελεσμάτων, το κύριο gol-mpi_parallel_io.c, τα functions.c και functions.h και ένα makefile. Σε αυτά υπάρχουν μικρές
 τροποποιήσεις, και ιδίως στο βασικό, για την είσοδο δεδομένων. Κατά τα άλλα, οι βασικές λειτουργίες είναι ακριβώς ίδιες,
 για αυτό η επεξήγησή του εδώ θα παραβλεφθεί (υπάρχει στο README του φακέλου mpi).

-Για την συγκεκριμένη παραλλαγή του προγράμματος, απαιτείται η παράλληλη εισαγωγή δεδομένων από ένα βασικό αρχείο με τιμές
 για τα κελιά του πίνακα. Στα προγράμματα της απλής MPI και του συνδυασμού MPI+OpenMP, αν δεν αρχικοποιούνται τα κελιά
 τυχαία, τότε το αρχείο που εισάγουμε εμπεριέχει τις θέσεις των ενεργών κελιών. Δηλαδή στο αρχείο glider στον φάκελο
 Input Files, εμπεριέχονται οι θέσεις (πχ [1,2]) των αρχικών ζωντανών κελιών, σε οποιοδήποτε μέγεθος πίνακα δοθεί. Επιλέξαμε
 αυτήν την τακτική εισόδου έτσι ώστε να έχουμε με απλό τρόπο κάποια μοτίβα για τον έλεγχο της ορθότητας του προγράμματος.
 Όμως εδώ, αυτό που θέλουμε είναι να διαβάζουν οι διεργασίες ταυτόχρονα από ένα αρχείο, που εμπεριέχει τον αρχικό πίνακα
 με τις τιμές των κελιών (0 ή 1), και κάθε διεργασία να παίρνει τον δικό της κατάλληλο υποπίνακα, ώστε να υπολογίζει τις
 επόμενες γεννεές όπως ακριβώς και στην απλή MPI. Άρα πρέπει να δημιουργηθεί ένα αρχείο "εικόνα" του αρχικού πίνακα που
 θέλουμε με τις διαστάσεις που επιθυμούμε. Αυτό το κάνουμε με το πρόγραμμα create_file που δίνεται επιπλέον. Εισάγουμε τις
 διαστάσεις του δισδιάστατου πίνακα που θέλουμε να φτιάξουμε, επιλέγουμε το όνομα του αρχείου που θα δημιουργήσουμε, καθώς
 και το αν ο πίνακας θα αρχικοποιηθεί τυχαία, ή με μηδενικά (έτσι ώστε να βάλουμε έπειτα εμείς σε όποια κελιά επιθυμούμε
 την τιμή 1, για να τα υποδηλώσουμε ως ζωντανά). Υπάρχουν ήδη κάποια αρχεία (f1, fglider, fmixed, fzeros) μεγέθους πίνακα
 16χ16, για δοκιμές. Προτείνεται η εξακρίβωση των αποτελεσμάτων του προγράμματος με την χρήση του glider στο σειριακό και
 του fglider στο mpi_parallel_io (όπως αυτή περιγράφεται στο README του φακέλου mpi). Αν θέλετε να δημιουργήσετε άλλο αρχείο
 για είσοδο, αυτό μπορεί να γίνει με την εντολή: ./create_file -n <size> -f <./"Input Files"/filename> -r 1 (τυχαία, αλλιώς
 για μόνο μηδενικά -r 0). Τα εκτελέσιμα για όλα τα προγράμματα δημιουργούνται απλά με την εκτέλεση του makefile (make).

-Στο πρόγραμμα, πέραν των υπολοίπων λειτουργιών που περιγράφονται και στην απλή MPI, εδώ κατά τον έλεγχο για το αρχείο εισόδου,
 ελέγχουμε αν το μέγεθος που έχουμε βάλει ως όρισμα (πχ -n 16 για πίνακα 16χ16) είναι ίδιο με το μέγεθος του αρχικού πίνακα που
 αντιστοιχεί στο αρχείο εισόδου (πχ fglider). Αν αυτό είναι ίδιο τότε συνεχίζουμε κανονικά, αλλιώς το πρόγραμμα τερματίζει.

-Έπειτα από την δημιουργία του τύπου του υποπίνακα (subarraytype), αρχίζουμε να διαβάζουμε από το αρχείο με την MPI_File_read().
 Ενώ στο απλό πρόγραμμα της MPI μόνο η πρώτη διεργασία διαβάζει το αρχείο, δημιουργεί τον αρχικό πίνακα και έπειτα, με την
 βοήθεια της MPI_Scatterv() διαμοιράζει τους υποπίνακες στις διεργασίες, εδώ αποφεύγουμε αυτήν την διαδικασία. Έτσι, αφού με το
 κατάλληλο indexing καταφέρνουμε να υπολογίσουμε το αρχικό σημείο για τον κάθε υποπίνακα και τα λοιπά στοιχεία του, διαβάζουμε
 τις τιμές και τις αντιγράφουμε στον πίνακα blocks που έχουμε ήδη δημιουργήσει και αντιστοιχεί στην κάθε διεργασία. Άρα κάθε
 διεργασία έχει πλέον τον υποπίνακά που της αντιστοιχεί, χωρίς να χρειάζεται να αρχικοποιηθεί κάποιος μεγάλος πίνακας και να
 χρησιμοποιηθεί η συνάρτηση MPI_Scatterv(). Στην συνέχεια, η διαδικασία είναι ίδια με αυτήν της απλής MPI.

-Σε κάθε περίπτωση, όπως και στον φακέλο της απλής MPI, υπάρχουν και σε αυτόν τον κώδικα αναλυτικά σχόλια.





